== '<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.30.2/js/jquery.tablesorter.min.js"></script> '

css:
  .job_metric_low {
    background-color: #ff8080
  }

  .job_metric_average {
    background-color: #ffff80
  }

  .job_metric_good {
    background-color: #80ff80
  }

  .task_state_COMPLETED {
    background-color: #80FF80 !important;
  }

  .task_state_COMPLETING {
    background-color: #FFA580 !important;
  }

  .task_state_CANCELLED {
    background-color: #80EEFF !important;
  }

  .task_state_FAILED {
    background-color: #FF8080 !important;
  }

  .task_state_TIMEOUT {
    background-color: #FF00FF !important;
  }

  .task_state_NODE_FAIL {
    background-color: #BB0000 !important;
  }

h3 = "Job table query interface"

= render "form"

- if @notice
  p[ style = 'color:#FF0000;' ] = @notice

div
  h3 = "Results (limited to 100)"
  table id="jobs" class="table table-bordered table-striped"
    thead
      tr
        td = "job issues"
        td = "cluster"
        td = "job id"
        td = "login"
        td = "partition"
        td = "start time"
        td = "end time"
        td = "state"
        td = "num cores"
        td = "duration (hours)"
        td = "cores* hours"
        td = "cpu load"
        td = "gpu load"
        td = "loadavg (processes)"
        td = "IPC"
        td = "ib_receive (MB)"
        td = "ib_sent (MB)"
    tbody
      - @jobs.each do |job|
        - job_performance = job.get_performance
        - job_ranking = job.get_ranking
        - job_cond = get_smart_conditions(job)
        tr
          td
            - if job_cond.size() > 0
              - job_cond.each do |cond|
                - if cond.include? "packets"
                  = image_tag "packets.png", size: "20", alt: cond, title: cond, style: "margin: 1px"
                - elsif cond.include? "gpu"
                  = image_tag "gpu.png", size: "20", alt: cond, title: cond, style: "margin: 1px"
                - elsif cond.include? "disbalance"
                  = image_tag "disbalance.png", size: "20", alt: cond, title: cond, style: "margin: 1px"
                - elsif cond.include? "disaster" or cond.include? "anomaly"
                  = image_tag "error.png", size: "20", alt: cond, title: cond, style: "margin: 1px"
                - else
                  = image_tag "other.png", size: "20", alt: cond, title: cond, style: "margin: 1px"
            - else
              = image_tag "ok.png", size: "20", border: 2

            = link_to("Analysis", job_analysis_path(job.id))
          td style="white-space: nowrap" = job.cluster
          td = link_to(job.drms_job_id, job)
          td = job.login
          td = job.partition
          td = job.start_time.strftime('%D %T')
          td = job.end_time.strftime('%D %T')
          td class="task_state_#{job.state}" = job.state
          td = job.num_cores
          td = number_with_precision((job.end_time - job.start_time) / 3600, :precision => 1)

          td = number_with_precision((job.end_time - job.start_time) / 3600 * job.num_cores, :precision => 1)
 
          td class="job_metric_#{job_ranking[:cpu_user]}" = number_with_precision(job_performance[:cpu_user], :precision => 1)

          td class="job_metric_#{job_ranking[:gpu_load]}" = number_with_precision(job_performance[:gpu_load], :precision => 1)

          td class="job_metric_#{job_ranking[:loadavg]}" = number_with_precision(job_performance[:loadavg], :precision => 1)

          td class="job_metric_#{job_ranking[:ipc]}" = number_with_precision(job_performance[:ipc] && job_performance[:ipc] / 1000000000, :precision => 2)

          td class="job_metric_#{job_ranking[:ib_rcv_data]}" = number_with_precision(job_performance[:ib_rcv_data], :precision => 1)

          td class="job_metric_#{job_ranking[:ib_xmit_data]}" = number_with_precision(job_performance[:ib_xmit_data], :precision => 1)

javascript:
  $("table").tablesorter(); 

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

css:
  .job_metric_low {
    background-color: #ff8080
  }

  .job_metric_average {
    background-color: #ffff80
  }

  .job_metric_good {
    background-color: #80ff80
  }

h1 = "Информация о задаче #{@job[:drms_job_id]}"

= @job[:command]

div class="row"
  div class="col-md-4"
    h3 = "Общая информация"
    table class="table table-bordered table-striped"
      tr
        td
          | Cluster
        td
          = @job[:cluster]
      tr
        td
          | Job id
        td
          = @job[:drms_job_id]
      tr
        td
          | Login
        td
          = @job[:login]
      tr
        td
          | State
        td
          = @job[:state]
      tr
        td
          | Partition
        td
          = @job[:partition]
      tr
        td
          | Num cores
        td
          = @job[:num_cores]
      tr
        td
          | Num nodes
        td
          = @job[:num_nodes]
      tr
        td
          | Submit time
        td
          = @job[:submit_time].strftime("%D %T")
      tr
        td
          | Start time
        td
          = @job[:start_time].strftime("%D %T")
      tr
        td
          | End time
        td
          = @job[:end_time].strftime("%D %T")
      tr
        td
          | Duration (hours)
        td
          = number_with_precision(@job.get_duration_hours, :precision => 1)

  div class="col-md-4"
    h3 = "Производительность"
    table class="table table-bordered table-striped"
      tr
        td
          | Metric
        td
          | Value
        td
          | Ranking
      tr
        td
          | Average CPU load (%)
        td
          = format_float_or_nil(@job_perf[:cpu_user])
        td class="job_metric_#{@ranking[:cpu_user]}"
          = @ranking[:cpu_user]
      tr
        td
          | Average Loadavg
        td
          = format_float_or_nil(@job_perf[:loadavg])
        td class="job_metric_#{@ranking[:loadavg]}"
          = @ranking[:loadavg]
      tr
        td
          | Average IPC
        td
          = format_float_or_nil(@job_perf[:ipc])
        td class="job_metric_#{@ranking[:ipc]}"
          = @ranking[:ipc]
      tr
        td
          | Average GPU load (%)
        td
          = format_float_or_nil(@job_perf[:gpu_load])
        td class="job_metric_#{@ranking[:gpu_load]}"
          = @ranking[:gpu_load]
      tr
        td
          | Average IB receive data (MB/s, total MPI + FS)
        td
          = format_float_or_nil(@job_perf[:ib_rcv_data])
        td class="job_metric_#{@ranking[:ib_rcv_data]}"
          = @ranking[:ib_rcv_data]
      tr
        td
          | Average IB send data (MB/s)
        td
          = format_float_or_nil(@job_perf[:ib_xmit_data])
        td class="job_metric_#{@ranking[:ib_xmit_data]}"
          = @ranking[:ib_xmit_data]

  div class="col-md-4"
    h3 = "Базовые свойства"
    table class="table table-bordered table-striped"
      - if @no_data
        tr
          td
            = "Отсутсвуют данные мониторинга"
      - else
        - if @primary_conditions.length > 0
          - @primary_conditions.each do |cond|
            tr
              td
                = @condition_descriptions[cond]
        - else
          tr
            td
              = "Свойств не обнаружено"

h3 = "Найденные признаки неэффективности"

table class="table table-bordered table-striped"
  tr
    td
      = "id"
    td
      = "Описание"
    td
      = "Предположение"
    td
      = "Рекомендация"

  - if @no_data
    tr
      td
        = "Отсутсвуют данные мониторинга"
      td
      td
      td

  - else
    - if @smart_conditions.length > 0
      - @smart_conditions.each do |cond|
        tr
          td
            = cond
          td
            = @condition_descriptions[cond][0]
          td
            = @condition_descriptions[cond][1]
          td
            = @condition_descriptions[cond][2]
    - else
      tr
        td
          = "Признаков не найдено"
        td
        td
        td

h3 = "Динамика поведения датчиков"

a href="full jd" Полный jd

div class="row"
  div id="g1" class="col-md-4" style="height: 200px"
  div id="g2" class="col-md-4" style="height: 200px"
  div id="g3" class="col-md-4" style="height: 200px"

div class="row"
  div id="g4" class="col-md-4" style="height: 200px"
  div id="g5" class="col-md-4" style="height: 200px"
  div id="g6" class="col-md-4" style="height: 200px"

h3 = "Текст"

div id="g7" style="height: 200px"
div id="g8" style="height: 300px"

javascript:
  $(document).ready(function(){

  google.charts.load('current', {packages: ['corechart', 'line']});
  google.charts.setOnLoadCallback(drawLineColors);

  function drawLineColors() {
    for(var ch = 1; ch <= 8; ch++)
    {
        var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'max');
        data.addColumn('number', 'avg');
        data.addColumn('number', 'min');

        var vals = [];

        for(var i = 0; i < ch * 10; i++)
        {
          var r = Math.floor(Math.random() * 10);

          vals.push([i, r, r/2, r/3])
        }

        data.addRows(vals);

        var options = {
          hAxis: {
            title: 'Time'
          },
          colors: ['#a52714', '#25a714', '#2527a4'],
          'chartArea': {'width': '100%', 'height': '80%'},
         'legend': {'position': 'bottom'},

        };

        var chart = new google.visualization.LineChart(document.getElementById('g' + ch));
        chart.draw(data, options);
      }
      }
    });

//fixme! translate
h1 Информация о задаче #{@job[:drms_job_id]}

a href='/jobstat/account/list/index' Вернуться к списку запусков
br
h5
  = @job[:command]

div class="row"
  div class="col-md-4"
    //fixme! translate
    h3 = "Общая информация"
    table class="table table-bordered table-striped"
      tr
        td
          | Cluster
        td
          = @job[:cluster]
      tr
        td
          | Job id
        td
          = @job[:drms_job_id]
      tr
        td
          | Login
        td
          = @job[:login]
      tr
        td
          | State
        td
          = @job[:state]
      tr
        td
          | Partition
        td
          = @job[:partition]
      tr
        td
          | Num cores
        td
          = @job[:num_cores]
      tr
        td
          | Num nodes
        td
          = @job[:num_nodes]
      tr
        td
          | Submit time
        td
          = @job[:submit_time].strftime("%D %T")
      tr
        td
          | Start time
        td
          = @job[:start_time].strftime("%D %T")
      tr
        td
          | End time
        td
          = @job[:end_time].strftime("%D %T")
      tr
        td
          | Duration (hours)
        td
          = number_with_precision(@job.get_duration_hours, :precision => 1)

  div class="col-md-4"
    //fixme! translate
    h3 = "Производительность"
    table class="table table-bordered table-striped"
      tr
        td
          | Metric
        td
          | Value
        td
          | Ranking
      tr
        td
          | Average CPU load (%)
        td
          = format_float_or_nil(@job_perf[:cpu_user])
        td class="job_metric_#{@ranking[:cpu_user]}"
          = @ranking[:cpu_user]
      tr
        td
          | Average Loadavg
        td
          = format_float_or_nil(@job_perf[:loadavg])
        td class="job_metric_#{@ranking[:loadavg]}"
          = @ranking[:loadavg]
      tr
        td
          | Average IPC
        td
          = format_float_or_nil(@job_perf[:ipc])
        td class="job_metric_#{@ranking[:ipc]}"
          = @ranking[:ipc]
      tr
        td
          | Average GPU load (%)
        td
          = format_float_or_nil(@job_perf[:gpu_load])
        td class="job_metric_#{@ranking[:gpu_load]}"
          = @ranking[:gpu_load]
      tr
        td
          | Average IB receive data MPI (MB/s)
        td
          = format_float_or_nil(@job_perf[:ib_rcv_data_mpi])
        td class="job_metric_#{@ranking[:ib_rcv_data_mpi]}"
          = @ranking[:ib_rcv_data_mpi]
      tr
        td
          | Average IB send data MPI (MB/s)
        td
          = format_float_or_nil(@job_perf[:ib_xmit_data_mpi])
        td class="job_metric_#{@ranking[:ib_xmit_data_mpi]}"
          = @ranking[:ib_xmit_data_mpi]
      tr
        td
          | Average IB receive data FS (MB/s)
        td
          = format_float_or_nil(@job_perf[:ib_rcv_data_fs])
        td class="job_metric_#{@ranking[:ib_rcv_data_fs]}"
          = @ranking[:ib_rcv_data_fs]
      tr
        td
          | Average IB send data FS (MB/s)
        td
          = format_float_or_nil(@job_perf[:ib_xmit_data_fs])
        td class="job_metric_#{@ranking[:ib_xmit_data_fs]}"
          = @ranking[:ib_xmit_data_fs]

  div class="col-md-4"
    //fixme! translate
    h3 = "Базовые свойства"
    table class="table table-bordered table-striped"
      - if @job.get_classes.length > 0
        - @job.get_classes.each do |cond|
          tr
            td
              = cond.description
      - else
        tr
          td
            //fixme! translate
            = "Необычных свойств не обнаружено"

//fixme! translate
h3 = "Найденные признаки неэффективности"

table class="table table-bordered table-striped"
  tr
    td
      = "id"
    td
      //fixme! translate
      = "Описание"
    td
      //fixme! translate
      = "Предположение"
    td
      //fixme! translate
      = "Рекомендация"

  - rules=@job.get_rules(@current_user)
  - if rules.length > 0
    - rules.each do |cond|
      tr
        td
          = cond.name
        td
          = cond.description
        td
          = cond.suggestion
        td
          = cond.text_recommendation
  - else
    tr
      td colspan="4"
        //fixme! translate
        = "Признаков не найдено"

//fixme! translate
h3 = "Динамика поведения датчиков"

a href="full jd" Полный jd

div class="row"
  div class="col-md-4" style="height: 250px"
    //fixme! translate
    h4 = "Загрузка ЦПУ %"
    div id="g_cpu"
  div class="col-md-4" style="height: 250px"
    h4 = "loadavg (link)"
    div id="g_loadavg"
  div class="col-md-4" style="height: 250px"
    //fixme! translate
    h4 = "Использование MPI IB MB/s"
    div id="g_ib_mpi"

div class="row"
  div class="col-md-4" style="height: 250px"
    //fixme! translate
    h4 = "Загрузка ГПУ %"
    div id="g_gpu"
  div class="col-md-4" style="height: 250px"
    //fixme! translate
    h4 = "IPC (link)"
    div id="g_ipc"
  div class="col-md-4" style="height: 250px"
    //fixme! translate
    h4 = "Использование FS IB MB/s"
    div id="g_ib_fs"

script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"

javascript:
  function DrawSingleGraph(target, sensor_data, max)
  {
	for(var i = 0; i < sensor_data.length; i++)
	sensor_data[i][0] = new Date(sensor_data[i][0]*1000);

      var data = new google.visualization.DataTable();
      data.addColumn('datetime', 'время');
      data.addColumn('number', 'среднее %');

      data.addRows(sensor_data);

      var options = {
        hAxis: {
          //fixme! translate
          title: 'Время',
        },
        vAxis: {
        },
        colors: ['#8080ff'],
        'chartArea': {'width': '90%', 'height': '80%'},
        'legend': {'position': 'bottom'},
      };

      if(max) {
        options.vAxis.viewWindow = {
          min: 0,
          max: max
          }
      }

      var chart = new google.visualization.LineChart(document.getElementById(target));
      chart.draw(data, options);
  }

  function DrawSendRecvGraph(target, sensor_data)
  {
	for(var i = 0; i < sensor_data.length; i++)
	sensor_data[i][0] = new Date(sensor_data[i][0]*1000);

      var data = new google.visualization.DataTable();
      //fixme! translate
      data.addColumn('datetime', 'время');
      //fixme! translate
      data.addColumn('number', 'передано MB/s');
      //fixme! translate
      data.addColumn('number', 'получено MB/s');

      data.addRows(sensor_data);

      var options = {
        hAxis: {
          //fixme! translate
          title: 'Время'
        },
        colors: ['#8080ff', '#ff8080'],
        'chartArea': {'width': '90%', 'height': '80%'},
       'legend': {'position': 'bottom'},
      };

      var chart = new google.visualization.LineChart(document.getElementById(target));
      chart.draw(data, options);
  }

  function DrawGraphs()
  {
     DrawSingleGraph("g_cpu",  #{{ raw @cpu_digest_data.to_json }} , 100);
     DrawSingleGraph("g_gpu",  #{{ raw @gpu_digest_data.to_json }} , 100);
     DrawSingleGraph("g_loadavg",  #{{ raw @loadavg_digest_data.to_json }} );
     DrawSingleGraph("g_ipc",  #{{ raw @ipc_digest_data.to_json }} );
     DrawSendRecvGraph("g_ib_mpi",  #{{ raw @mpi_digest_data.to_json }} );
     DrawSendRecvGraph("g_ib_fs",  #{{ raw @fs_digest_data.to_json }} );

  }

  $(document).ready(function(){
    google.charts.load('current', {packages: ['corechart', 'line']});
    google.charts.setOnLoadCallback(DrawGraphs);
  });


css:
  .job_metric_low {
    background-color: #ff8080
  }

  .job_metric_average {
    background-color: #ffff80
  }

  .job_metric_good {
    background-color: #80ff80
  }
